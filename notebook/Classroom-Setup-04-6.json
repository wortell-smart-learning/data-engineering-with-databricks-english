{
	"name": "Classroom-Setup-04-6",
	"properties": {
		"folder": {
			"name": "includes"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a74bd9ae-0177-4053-9d58-a321e3b48078"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run ./_utility-methods"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# lesson: Writing delta \n",
					"def create_eltwss_users_update():\n",
					"    import time\n",
					"    import pyspark.sql.functions as F\n",
					"    start = int(time.time())\n",
					"    print(f\"Creating the table \\\"users_dirty\\\"\", end=\"...\")\n",
					"\n",
					"    df = spark.createDataFrame(data=[(None, None, None, None), (None, None, None, None), (None, None, None, None)], \n",
					"                               schema=\"user_id: string, user_first_touch_timestamp: long, email:string, updated:timestamp\")\n",
					"    (spark.read\n",
					"          .parquet(f\"{DA.paths.datasets}/ecommerce/raw/users-30m\")\n",
					"          .withColumn(\"updated\", F.current_timestamp())\n",
					"          .union(df)\n",
					"          .write\n",
					"          .mode(\"overwrite\")\n",
					"          .saveAsTable(\"users_dirty\"))\n",
					"    \n",
					"    total = spark.read.table(\"users_dirty\").count()\n",
					"    print(f\"({int(time.time())-start} seconds / {total:,} records)\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"DA = DBAcademyHelper(**helper_arguments)\n",
					"DA.reset_environment()\n",
					"DA.init(install_datasets=True, create_db=True)\n",
					"\n",
					"print()\n",
					"create_eltwss_users_update()\n",
					"    \n",
					"DA.conclude_setup()\n",
					""
				],
				"execution_count": null
			}
		]
	}
}