{
	"name": "Classroom-Setup-11-1",
	"properties": {
		"folder": {
			"name": "includes"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d510ecd2-d235-4635-94bb-4d2708647e67"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run ./_utility-methods"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"@DBAcademyHelper.monkey_patch\n",
					"def print_sql(self, rows, sql):\n",
					"    html = f\"\"\"<textarea style=\"width:100%\" rows=\"{rows}\"> \\n{sql.strip()}</textarea>\"\"\"\n",
					"    displayHTML(html)\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"@DBAcademyHelper.monkey_patch\n",
					"def generate_users_table(self):\n",
					"    self.print_sql(20, f\"\"\"\n",
					"CREATE DATABASE IF NOT EXISTS {DA.db_name}\n",
					"LOCATION '{DA.paths.user_db}';\n",
					"\n",
					"USE {DA.db_name};\n",
					"\n",
					"CREATE TABLE users (id INT, name STRING, value DOUBLE, state STRING);\n",
					"\n",
					"INSERT INTO users\n",
					"VALUES (1, \"Yve\", 1.0, \"CA\"),\n",
					"       (2, \"Omar\", 2.5, \"NY\"),\n",
					"       (3, \"Elia\", 3.3, \"OH\"),\n",
					"       (4, \"Rebecca\", 4.7, \"TX\"),\n",
					"       (5, \"Ameena\", 5.3, \"CA\"),\n",
					"       (6, \"Ling\", 6.6, \"NY\"),\n",
					"       (7, \"Pedro\", 7.1, \"KY\");\n",
					"\n",
					"CREATE VIEW ny_users_vw\n",
					"AS SELECT * FROM users WHERE state = 'NY';\n",
					"\"\"\")\n",
					"    "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"@DBAcademyHelper.monkey_patch\n",
					"def generate_create_database_with_grants(self):\n",
					"    self.print_sql(7, f\"\"\"\n",
					"CREATE DATABASE {DA.db_name}_derivative;\n",
					"\n",
					"GRANT USAGE, READ_METADATA, CREATE, MODIFY, SELECT ON DATABASE `{DA.db_name}_derivative` TO `users`;\n",
					"\n",
					"SHOW GRANT ON DATABASE `{DA.db_name}_derivative`;\"\"\")    \n",
					"    "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"DA = DBAcademyHelper(**helper_arguments)\n",
					"DA.reset_environment()\n",
					"DA.init(install_datasets=True, create_db=False)\n",
					"DA.conclude_setup()\n",
					""
				],
				"execution_count": null
			}
		]
	}
}