{
	"name": "Classroom-Setup-04-2",
	"properties": {
		"folder": {
			"name": "includes"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bd62e781-6b79-4f8b-957a-0468516bd5c4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run ./_utility-methods"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"DA = DBAcademyHelper(**helper_arguments) # Create the DA object\n",
					"DA.reset_environment()                   # Reset by removing databases and files from other lessons\n",
					"DA.init(install_datasets=True,           # Initialize, install and validate the datasets\n",
					"        create_db=True)                  # Continue initialization, create the user-db"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"import os, time, shutil, sqlite3\n",
					"import pandas as pd\n",
					"\n",
					"# Create a user-specific copy of the sales-csv.\n",
					"DA.paths.sales_csv = f\"{DA.paths.working_dir}/sales-csv\"\n",
					"dbutils.fs.cp(f\"{DA.paths.datasets}/ecommerce/raw/sales-csv\", DA.paths.sales_csv, True)\n",
					"\n",
					"start = int(time.time())\n",
					"print(f\"Creating the users table\", end=\"...\")\n",
					"\n",
					"DA.paths.ecommerce_db = f\"{DA.paths.working_dir}/ecommerce.db\"\n",
					"datasource_path = f\"{DA.paths.datasets}/ecommerce/raw/users-historical\"\n",
					"\n",
					"# Create the temp directory and declare the path to the temp db file.\n",
					"db_temp_dir = f\"/tmp/{DA.username}\"\n",
					"dbutils.fs.mkdirs(f\"file:{db_temp_dir}\")\n",
					"db_temp_path = f\"{db_temp_dir}/ecommerce.db\"\n",
					"\n",
					"# Spark => JDBC cannot create the database reliably but Pandas can.\n",
					"conn = sqlite3.connect(db_temp_path) \n",
					"c = conn.cursor()\n",
					"c.execute('CREATE TABLE IF NOT EXISTS users (user_id string, user_first_touch_timestamp decimal(20,0), email string)')\n",
					"conn.commit()\n",
					"df = pd.read_parquet(path = datasource_path.replace(\"dbfs:/\", '/dbfs/'))\n",
					"df.to_sql('users', conn, if_exists='replace', index = False)\n",
					"\n",
					"# Move the temp db to the final location\n",
					"dbutils.fs.mv(f\"file:{db_temp_path}\", DA.paths.ecommerce_db)\n",
					"DA.paths.ecommerce_db = DA.paths.ecommerce_db.replace(\"dbfs:/\", \"/dbfs/\")\n",
					"\n",
					"# Report on the setup time.\n",
					"total = spark.read.parquet(datasource_path).count()\n",
					"print(f\"({int(time.time())-start} seconds / {total:,} records)\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"DA.conclude_setup()\n",
					""
				],
				"execution_count": null
			}
		]
	}
}