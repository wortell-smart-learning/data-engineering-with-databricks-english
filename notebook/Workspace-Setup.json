{
	"name": "Workspace-Setup",
	"properties": {
		"folder": {
			"name": "Includes"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "78a87998-eefa-4030-9d21-cf4b999cfd58"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"\n",
					"<div style=\"text-align: center; line-height: 0; padding-top: 9px;\">\n",
					"  <img src=\"https://databricks.com/wp-content/uploads/2018/03/db-academy-rgb-1200px.png\" alt=\"Databricks Learning\" style=\"width: 600px\">\n",
					"</div>"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"\n",
					"# Workspace Setup\n",
					"This notebook should be run by instructors to prepare the workspace for a class.\n",
					"\n",
					"The key changes this notebook makes includes:\n",
					"* Updating user-specific grants such that they can create databases/schemas against the current catalog when they are not workspace-admins.\n",
					"* Configures three cluster policies:\n",
					"    * **Student's All-Purpose Policy** - which should be used on clusters running standard notebooks.\n",
					"    * **Student's Jobs-Only Policy** - which should be used on workflows/jobs\n",
					"    * **Student's DLT-Only Policy** - which should be used on DLT piplines (automatically applied)\n",
					"* Create or update the shared **Starter Warehouse** for use in Databricks SQL exercises\n",
					"* Create the Instance Pool **Student's Pool** for use by students and the \"student\" and \"jobs\" policies."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run ./_utility-methods"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Get Class Config\n",
					"The three variables defined by these widgets are used to configure our environment as a means of controlling class cost."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Setup the widgets to collect required parameters.\n",
					"from dbacademy_helper.workspace_helper import ALL_USERS # no other option for this course\n",
					"dbutils.widgets.dropdown(\"configure_for\", ALL_USERS, [ALL_USERS], \"Configure Workspace For\")\n",
					"\n",
					"# students_count is the reasonable estiamte to the maximum number of students\n",
					"dbutils.widgets.text(\"students_count\", \"\", \"Number of Students\")\n",
					"\n",
					"# event_name is the name assigned to this event/class or alternatively its class number\n",
					"dbutils.widgets.text(\"event_name\", \"\", \"Event Name/Class Number\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"\n",
					"# Init Script & Install Datasets\n",
					"The main affect of this call is to pre-install the datasets.\n",
					"\n",
					"It has the side effect of create our DA object which includes our REST client."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"DA = DBAcademyHelper(**helper_arguments) # Create the DA object\n",
					"DA.reset_environment()                   # Reset by removing databases and files from other lessons\n",
					"DA.init(install_datasets=True,           # Initialize, install and validate the datasets\n",
					"        create_db=False)                 # Continue initialization, create the user-db\n",
					"DA.conclude_setup()                      # Conclude setup by advertising environmental changes"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"\n",
					"## Create Class Instance Pools\n",
					"The following cell configures the instance pool used for this class"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"instance_pool_id = DA.workspace.clusters.create_instance_pools()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"\n",
					"## Create The Three Class-Specific Cluster Policies\n",
					"The following cells create the various cluster policies used by the class"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"DA.workspace.clusters.create_all_purpose_policy(instance_pool_id)\n",
					"DA.workspace.clusters.create_jobs_policy(instance_pool_id)\n",
					"DA.workspace.clusters.create_dlt_policy(instance_pool_id)\n",
					"None"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"\n",
					"## Create Class-Shared Databricks SQL Warehouse/Endpoint\n",
					"Creates a single wharehouse to be used by all students.\n",
					"\n",
					"The configuration is derived from the number of students specified above."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"DA.workspace.warehouses.create_shared_sql_warehouse()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"\n",
					"## Configure User Entitlements\n",
					"\n",
					"This task simply adds the \"**databricks-sql-access**\" entitlement to the \"**users**\" group ensuring that they can access the Databricks SQL view."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"DA.workspace.add_entitlement_workspace_access()\n",
					"DA.workspace.add_entitlement_databricks_sql_access()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"\n",
					"## Update Grants\n",
					"This operation executes **`GRANT CREATE ON CATALOG TO users`** to ensure that students can create databases as required by this course when they are not admins.\n",
					"\n",
					"Note: The implementation requires this to execute in another job and as such can take about three minutes to complete."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Ensures that all users can create databases on the current catalog \n",
					"# for cases wherein the user/student is not an admin.\n",
					"job_id = DA.workspace.databases.configure_permissions(\"Configure-Permissions\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"DA.client.jobs().delete_by_id(job_id)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"DA.setup_completed()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"&copy; 2022 Databricks, Inc. All rights reserved.<br/>\n",
					"Apache, Apache Spark, Spark and the Spark logo are trademarks of the <a href=\"https://www.apache.org/\">Apache Software Foundation</a>.<br/>\n",
					"<br/>\n",
					"<a href=\"https://databricks.com/privacy-policy\">Privacy Policy</a> | <a href=\"https://databricks.com/terms-of-use\">Terms of Use</a> | <a href=\"https://help.databricks.com/\">Support</a>"
				]
			}
		]
	}
}