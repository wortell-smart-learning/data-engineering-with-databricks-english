{
	"name": "Classroom-Setup-12-1",
	"properties": {
		"folder": {
			"name": "includes"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0761854e-e362-456f-bc89-ad82c92856ab"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run ./_utility-methods"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"DA = DBAcademyHelper(**helper_arguments)\n",
					"DA.reset_environment()\n",
					"DA.init(install_datasets=True, create_db=False)\n",
					"DA.conclude_setup()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def print_sql(rows, sql):\n",
					"    html = f\"<textarea style=\\\"width:100%\\\" rows={rows}> \\n{sql.strip()}</textarea>\"\n",
					"    displayHTML(html)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def _generate_config():\n",
					"    print_sql(33, f\"\"\"\n",
					"CREATE DATABASE IF NOT EXISTS {DA.db_name}\n",
					"LOCATION '{DA.paths.working_dir}';\n",
					"\n",
					"USE {DA.db_name};\n",
					"\n",
					"CREATE TABLE user_ping \n",
					"(user_id STRING, ping INTEGER, time TIMESTAMP); \n",
					"\n",
					"CREATE TABLE user_ids (user_id STRING);\n",
					"\n",
					"INSERT INTO user_ids VALUES\n",
					"(\"potato_luver\"),\n",
					"(\"beanbag_lyfe\"),\n",
					"(\"default_username\"),\n",
					"(\"the_king\"),\n",
					"(\"n00b\"),\n",
					"(\"frodo\"),\n",
					"(\"data_the_kid\"),\n",
					"(\"el_matador\"),\n",
					"(\"the_wiz\");\n",
					"\n",
					"CREATE FUNCTION get_ping()\n",
					"    RETURNS INT\n",
					"    RETURN int(rand() * 250);\n",
					"    \n",
					"CREATE FUNCTION is_active()\n",
					"    RETURNS BOOLEAN\n",
					"    RETURN CASE \n",
					"        WHEN rand() > .25 THEN true\n",
					"        ELSE false\n",
					"        END;\n",
					"\"\"\")\n",
					"    \n",
					"DA.generate_config = _generate_config    "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def _generate_load():\n",
					"    print_sql(12, f\"\"\"\n",
					"USE {DA.db_name};\n",
					"\n",
					"INSERT INTO user_ping\n",
					"SELECT *, \n",
					"  get_ping() ping, \n",
					"  current_timestamp() time\n",
					"FROM user_ids\n",
					"WHERE is_active()=true;\n",
					"\n",
					"SELECT * FROM user_ping;\n",
					"\"\"\")\n",
					"\n",
					"DA.generate_load = _generate_load"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def _generate_user_counts():\n",
					"    print_sql(10, f\"\"\"\n",
					"USE {DA.db_name};\n",
					"\n",
					"SELECT user_id, count(*) total_records\n",
					"FROM user_ping\n",
					"GROUP BY user_id\n",
					"ORDER BY \n",
					"  total_records DESC,\n",
					"  user_id ASC;\n",
					"\"\"\")\n",
					"\n",
					"DA.generate_user_counts = _generate_user_counts"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def _generate_avg_ping():\n",
					"    print_sql(10, f\"\"\"\n",
					"USE {DA.db_name};\n",
					"\n",
					"SELECT user_id, window.end end_time, mean(ping) avg_ping\n",
					"FROM user_ping\n",
					"GROUP BY user_id, window(time, '3 minutes')\n",
					"ORDER BY\n",
					"  end_time DESC,\n",
					"  user_id ASC;\n",
					"\"\"\")\n",
					"\n",
					"DA.generate_avg_ping = _generate_avg_ping"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def _generate_summary():\n",
					"    print_sql(8, f\"\"\"\n",
					"USE {DA.db_name};\n",
					"\n",
					"SELECT user_id, min(time) first_seen, max(time) last_seen, count(*) total_records, avg(ping) total_avg_ping\n",
					"FROM user_ping\n",
					"GROUP BY user_id\n",
					"ORDER BY user_id ASC;\n",
					"\"\"\")\n",
					"    \n",
					"DA.generate_summary = _generate_summary\n",
					""
				],
				"execution_count": null
			}
		]
	}
}